{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "lib/src/browser.es6",
    "src/index.es6",
    "node_modules/pym.js/dist/pym.js"
  ],
  "names": [],
  "mappings": "AAAA;;;;;;ACEA,OAAO,QAAP;;;;;;;;;;;;;;;;;;;;;;ICAM;AACJ,WADI,QACJ,CAAY,aAAZ,EAA2B;0BADvB,UACuB;;AACzB,SAAK,aAAL,GAAqB,aAArB,CADyB;GAA3B;;eADI;;gCAKQ,aAAa,SAAQ;AAC/B,gBAAU,WAAW,EAAX;AADqB,UAE/B,CAAK,aAAL,CAAmB,WAAnB,CAA+B,WAA/B,EAA4C,KAAK,SAAL,CAAe,OAAf,CAA5C,EAF+B;;;;+BAKtB,aAAa,IAAI;AAC1B,WAAK,aAAL,CAAmB,SAAnB,CAA6B,WAA7B,EAA0C,UAAS,IAAT,EAAc;AACtD,WAAG,KAAK,KAAL,CAAW,IAAX,CAAH,EADsD;OAAd,CAA1C,CAD0B;;;;iCAMR,aAAa,WAAW;AAC1C,aAAO,IAAI,IAAJ,CAAS,IAAI,cAAI,MAAJ,CAAW,WAAf,EAA4B,SAA5B,EAAuC,EAAvC,CAAT,CAAP,CAD0C;;;;oCAIX;UAAZ,gEAAQ,kBAAI;;AAC/B,UAAI,QAAQ,IAAI,cAAI,KAAJ,CAAU,OAAd,CAAR,CAD2B;AAE/B,YAAM,UAAN,GAF+B;AAG/B,aAAO,IAAI,IAAJ,CAAS,KAAT,CAAP,CAH+B;;;;SAp
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "import { Lunicorn } from \"./index\"\n\nglobal.Lunicorn = Lunicorn\n",
    "import pym from \"pym.js\"\n\nclass Lunicorn {\n  constructor(iframeCrosser) {\n    this.iframeCrosser = iframeCrosser\n  }\n\n  sendMessage(messageType, message){\n    message = message || {} //pym doesn fire the callback if message is undefined\n    this.iframeCrosser.sendMessage(messageType, JSON.stringify(message))\n  }\n\n  addHandler(messageType, cb) {\n    this.iframeCrosser.onMessage(messageType, function(data){\n      cb(JSON.parse(data))\n    })\n  }\n\n  static createIframe(parentDomID, iframeUrl) {\n    return new this(new pym.Parent(parentDomID, iframeUrl, {}))\n  }\n\n  static consumeIframe(pymOpts={}) {\n    let child = new pym.Child(pymOpts)\n    child.sendHeight()\n    return new this(child)\n  }\n}\n\nexport { Lunicorn }\n",
    "/*! pym.js - v0.4.4 - 2015-07-16 */\n/*\n* Pym.js is library that resizes an iframe based on the width of the parent and the resulting height of the child.\n* Check out the docs at http://blog.apps.npr.org/pym.js/ or the readme at README.md for usage.\n*/\n\n/* global module */\n\n(function(factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module !== 'undefined' && module.exports) {\n        module.exports = factory();\n    } else {\n        window.pym = factory.call(this);\n    }\n})(function() {\n    var MESSAGE_DELIMITER = 'xPYMx';\n\n    var lib = {};\n\n    /**\n    * Generic function for parsing URL params.\n    * Via http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript\n    *\n    * @method _getParameterByName\n    * @param {String} name The name of the paramter to get from the URL.\n    */\n    var _getParameterByName = function(name) {\n        var regex = new RegExp(\"[\\\\?&]\" + name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]') + '=([^&#]*)');\n        var results = regex.exec(location.search);\n\n        if (results === null) {\n            return '';\n        }\n\n        return decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n    };\n\n    /**\n     * Check the message to make sure it comes from an acceptable xdomain.\n     * Defaults to '*' but can be overriden in config.\n     *\n     * @method _isSafeMessage\n     * @param {Event} e The message event.\n     * @param {Object} settings Configuration.\n     */\n    var _isSafeMessage = function(e, settings) {\n        if (settings.xdomain !== '*') {\n            // If origin doesn't match our xdomain, return.\n            if (!e.origin.match(new RegExp(settings.xdomain + '$'))) { return; }\n        }\n\n        return true;\n    };\n\n    /**\n     * Construct a message to send between frames.\n     *\n     * NB: We use string-building here because JSON message passing is\n     * not supported in all browsers.\n     *\n     * @method _makeMessage\n     * @param {String} id The unique id of the message recipient.\n     * @param {String} messageType The type of message to send.\n     * @param {String} message The message to send.\n     */\n    var _makeMessage = function(id, messageType, message) {\n        var bits = ['pym', id, messageType, message];\n\n        return bits.join(MESSAGE_DELIMITER);\n    };\n\n    /**\n     * Construct a regex to validate and parse messages.\n     *\n     * @method _makeMessageRegex\n     * @param {String} id The unique id of the message recipient.\n     */\n    var _makeMessageRegex = function(id) {\n        var bits = ['pym', id, '(\\\\S+)', '(.+)'];\n\n        return new RegExp('^' + bits.join(MESSAGE_DELIMITER) + '$');\n    };\n\n    /**\n     * Initialize Pym for elements on page that have data-pym attributes.\n     *\n     * @method _autoInit\n     */\n    var _autoInit = function() {\n        var elements = document.querySelectorAll(\n            '[data-pym-src]:not([data-pym-auto-initialized])'\n        );\n\n        var length = elements.length;\n\n        for (var idx = 0; idx < length; ++idx) {\n            var element = elements[idx];\n\n            /*\n            * Mark automatically-initialized elements so they are not\n            * re-initialized if the user includes pym.js more than once in the\n            * same document.\n            */\n            element.setAttribute('data-pym-auto-initialized', '');\n\n            // Ensure elements have an id\n            if (element.id === '') {\n                element.id = 'pym-' + idx;\n            }\n\n            var src = element.getAttribute('data-pym-src');\n            var xdomain = element.getAttribute('data-pym-xdomain');\n            var config = {};\n\n            if (xdomain) {\n               config.xdomain = xdomain;\n            }\n\n            new lib.Parent(element.id, src, config);\n        }\n    };\n\n    /**\n     * The Parent half of a response iframe.\n     *\n     * @class Parent\n     * @param {String} id The id of the div into which the iframe will be rendered.\n     * @param {String} url The url of the iframe source.\n     * @param {Object} config Configuration to override the default settings.\n     */\n    lib.Parent = function(id, url, config) {\n        this.id = id;\n        this.url = url;\n        this.el = document.getElementById(id);\n        this.iframe = null;\n\n        this.settings = {\n            xdomain: '*'\n        };\n\n        this.messageRegex = _makeMessageRegex(this.id);\n        this.messageHandlers = {};\n\n        // ensure a config object\n        config = (config || {});\n\n        /**\n         * Construct the iframe.\n         *\n         * @memberof Parent.prototype\n         * @method _constructIframe\n         */\n        this._constructIframe = function() {\n            // Calculate the width of this element.\n            var width = this.el.offsetWidth.toString();\n\n            // Create an iframe element attached to the document.\n            this.iframe = document.createElement('iframe');\n\n            // Save fragment id\n            var hash = '';\n            var hashIndex = this.url.indexOf('#');\n\n            if (hashIndex > -1) {\n                hash = this.url.substring(hashIndex, this.url.length);\n                this.url = this.url.substring(0, hashIndex);\n            }\n\n            // If the URL contains querystring bits, use them.\n            // Otherwise, just create a set of valid params.\n            if (this.url.indexOf('?') < 0) {\n                this.url += '?';\n            } else {\n                this.url += '&';\n            }\n\n            // Append the initial width as a querystring parameter, and the fragment id\n            this.iframe.src = this.url +\n                'initialWidth=' + width +\n                '&childId=' + this.id +\n                '&parentUrl=' + encodeURIComponent(window.location.href) +\n                hash;\n\n            // Set some attributes to this proto-iframe.\n            this.iframe.setAttribute('width', '100%');\n            this.iframe.setAttribute('scrolling', 'no');\n            this.iframe.setAttribute('marginheight', '0');\n            this.iframe.setAttribute('frameborder', '0');\n\n            // Append the iframe to our element.\n            this.el.appendChild(this.iframe);\n\n            // Add an event listener that will handle redrawing the child on resize.\n            window.addEventListener('resize', this._onResize);\n        };\n\n        /**\n         * Send width on resize.\n         *\n         * @memberof Parent.prototype\n         * @method _onResize\n         */\n        this._onResize = function() {\n            this.sendWidth();\n        }.bind(this);\n\n        /**\n         * Fire all event handlers for a given message type.\n         *\n         * @memberof Parent.prototype\n         * @method _fire\n         * @param {String} messageType The type of message.\n         * @param {String} message The message data.\n         */\n        this._fire = function(messageType, message) {\n            if (messageType in this.messageHandlers) {\n                for (var i = 0; i < this.messageHandlers[messageType].length; i++) {\n                   this.messageHandlers[messageType][i].call(this, message);\n                }\n            }\n        };\n\n        /**\n         * Remove this parent from the page and unbind it's event handlers.\n         *\n         * @memberof Parent.prototype\n         * @method remove\n         */\n        this.remove = function() {\n            window.removeEventListener('message', this._processMessage);\n            window.removeEventListener('resize', this._onResize);\n\n            this.el.removeChild(this.iframe);\n        };\n\n        /**\n         * @callback Parent~onMessageCallback\n         * @param {String} message The message data.\n         */\n\n        /**\n         * Process a new message from the child.\n         *\n         * @memberof Parent.prototype\n         * @method _processMessage\n         * @param {Event} e A message event.\n         */\n        this._processMessage = function(e) {\n            // First, punt if this isn't from an acceptable xdomain.\n            if (!_isSafeMessage(e, this.settings)) {\n                return;\n            }\n\n            // Discard object messages, we only care about strings\n            if (typeof e.data !== 'string') {\n                return;\n            }\n\n            // Grab the message from the child and parse it.\n            var match = e.data.match(this.messageRegex);\n\n            // If there's no match or too many matches in the message, punt.\n            if (!match || match.length !== 3) {\n                return false;\n            }\n\n            var messageType = match[1];\n            var message = match[2];\n\n            this._fire(messageType, message);\n        }.bind(this);\n\n        /**\n         * Resize iframe in response to new height message from child.\n         *\n         * @memberof Parent.prototype\n         * @method _onHeightMessage\n         * @param {String} message The new height.\n         */\n        this._onHeightMessage = function(message) {\n            /*\n             * Handle parent height message from child.\n             */\n            var height = parseInt(message);\n\n            this.iframe.setAttribute('height', height + 'px');\n        };\n\n        /**\n         * Navigate parent to a new url.\n         *\n         * @memberof Parent.prototype\n         * @method _onNavigateToMessage\n         * @param {String} message The url to navigate to.\n         */\n        this._onNavigateToMessage = function(message) {\n            /*\n             * Handle parent scroll message from child.\n             */\n             document.location.href = message;\n        };\n\n        /**\n         * Bind a callback to a given messageType from the child.\n         *\n         * Reserved message names are: \"height\", \"scrollTo\" and \"navigateTo\".\n         *\n         * @memberof Parent.prototype\n         * @method onMessage\n         * @param {String} messageType The type of message being listened for.\n         * @param {Parent~onMessageCallback} callback The callback to invoke when a message of the given type is received.\n         */\n        this.onMessage = function(messageType, callback) {\n            if (!(messageType in this.messageHandlers)) {\n                this.messageHandlers[messageType] = [];\n            }\n\n            this.messageHandlers[messageType].push(callback);\n        };\n\n        /**\n         * Send a message to the the child.\n         *\n         * @memberof Parent.prototype\n         * @method sendMessage\n         * @param {String} messageType The type of message to send.\n         * @param {String} message The message data to send.\n         */\n        this.sendMessage = function(messageType, message) {\n            this.el.getElementsByTagName('iframe')[0].contentWindow.postMessage(_makeMessage(this.id, messageType, message), '*');\n        };\n\n        /**\n         * Transmit the current iframe width to the child.\n         *\n         * You shouldn't need to call this directly.\n         *\n         * @memberof Parent.prototype\n         * @method sendWidth\n         */\n        this.sendWidth = function() {\n            var width = this.el.offsetWidth.toString();\n\n            this.sendMessage('width', width);\n        };\n\n        // Add any overrides to settings coming from config.\n        for (var key in config) {\n            this.settings[key] = config[key];\n        }\n\n        // Bind required message handlers\n        this.onMessage('height', this._onHeightMessage);\n        this.onMessage('navigateTo', this._onNavigateToMessage);\n\n        // Add a listener for processing messages from the child.\n        window.addEventListener('message', this._processMessage, false);\n\n        // Construct the iframe in the container element.\n        this._constructIframe();\n\n        return this;\n    };\n\n    /**\n     * The Child half of a responsive iframe.\n     *\n     * @class Child\n     * @param {Object} config Configuration to override the default settings.\n     */\n    lib.Child = function(config) {\n        this.parentWidth = null;\n        this.id = null;\n        this.parentUrl = null;\n\n        this.settings = {\n            renderCallback: null,\n            xdomain: '*',\n            polling: 0\n        };\n\n        this.messageRegex = null;\n        this.messageHandlers = {};\n\n        // Ensure a config object\n        config = (config || {});\n\n        /**\n         * Bind a callback to a given messageType from the child.\n         *\n         * Reserved message names are: \"width\".\n         *\n         * @memberof Child.prototype\n         * @method onMessage\n         * @param {String} messageType The type of message being listened for.\n         * @param {Child~onMessageCallback} callback The callback to invoke when a message of the given type is received.\n         */\n        this.onMessage = function(messageType, callback) {\n            if (!(messageType in this.messageHandlers)) {\n                this.messageHandlers[messageType] = [];\n            }\n\n            this.messageHandlers[messageType].push(callback);\n        };\n\n        /**\n         * @callback Child~onMessageCallback\n         * @param {String} message The message data.\n         */\n\n        /**\n         * Fire all event handlers for a given message type.\n         *\n         * @memberof Parent.prototype\n         * @method _fire\n         * @param {String} messageType The type of message.\n         * @param {String} message The message data.\n         */\n        this._fire = function(messageType, message) {\n            /*\n             * Fire all event handlers for a given message type.\n             */\n            if (messageType in this.messageHandlers) {\n                for (var i = 0; i < this.messageHandlers[messageType].length; i++) {\n                   this.messageHandlers[messageType][i].call(this, message);\n                }\n            }\n        };\n\n        /**\n         * Process a new message from the parent.\n         *\n         * @memberof Child.prototype\n         * @method _processMessage\n         * @param {Event} e A message event.\n         */\n        this._processMessage = function(e) {\n            /*\n            * Process a new message from parent frame.\n            */\n            // First, punt if this isn't from an acceptable xdomain.\n            if (!_isSafeMessage(e, this.settings)) {\n                return;\n            }\n\n            // Discard object messages, we only care about strings\n            if (typeof e.data !== 'string') {\n                return;\n            }\n\n            // Get the message from the parent.\n            var match = e.data.match(this.messageRegex);\n\n            // If there's no match or it's a bad format, punt.\n            if (!match || match.length !== 3) { return; }\n\n            var messageType = match[1];\n            var message = match[2];\n\n            this._fire(messageType, message);\n        }.bind(this);\n\n        /**\n         * Resize iframe in response to new width message from parent.\n         *\n         * @memberof Child.prototype\n         * @method _onWidthMessage\n         * @param {String} message The new width.\n         */\n        this._onWidthMessage = function(message) {\n            /*\n             * Handle width message from the child.\n             */\n            var width = parseInt(message);\n\n            // Change the width if it's different.\n            if (width !== this.parentWidth) {\n                this.parentWidth = width;\n\n                // Call the callback function if it exists.\n                if (this.settings.renderCallback) {\n                    this.settings.renderCallback(width);\n                }\n\n                // Send the height back to the parent.\n                this.sendHeight();\n            }\n        };\n\n        /**\n         * Send a message to the the Parent.\n         *\n         * @memberof Child.prototype\n         * @method sendMessage\n         * @param {String} messageType The type of message to send.\n         * @param {String} message The message data to send.\n         */\n        this.sendMessage = function(messageType, message) {\n            /*\n             * Send a message to the parent.\n             */\n            window.parent.postMessage(_makeMessage(this.id, messageType, message), '*');\n        };\n\n        /**\n         * Transmit the current iframe height to the parent.\n         *\n         * Call this directly in cases where you manually alter the height of the iframe contents.\n         *\n         * @memberof Child.prototype\n         * @method sendHeight\n         */\n        this.sendHeight = function() {\n            // Get the child's height.\n            var height = document.getElementsByTagName('body')[0].offsetHeight.toString();\n\n            // Send the height to the parent.\n            this.sendMessage('height', height);\n        }.bind(this);\n\n        /**\n         * Scroll parent to a given element id.\n         *\n         * @memberof Child.prototype\n         * @method scrollParentTo\n         * @param {String} hash The id of the element to scroll to.\n         */\n        this.scrollParentTo = function(hash) {\n            this.sendMessage('navigateTo', '#' + hash);\n        };\n\n        /**\n         * Navigate parent to a given url.\n         *\n         * @memberof Parent.prototype\n         * @method navigateParentTo\n         * @param {String} url The url to navigate to.\n         */\n        this.navigateParentTo = function(url) {\n            this.sendMessage('navigateTo', url);\n        };\n\n        // Identify what ID the parent knows this child as.\n        this.id = _getParameterByName('childId') || config.id;\n        this.messageRegex = new RegExp('^pym' + MESSAGE_DELIMITER + this.id + MESSAGE_DELIMITER + '(\\\\S+)' + MESSAGE_DELIMITER + '(.+)$');\n\n        // Get the initial width from a URL parameter.\n        var width = parseInt(_getParameterByName('initialWidth'));\n\n        // Get the url of the parent frame\n        this.parentUrl = _getParameterByName('parentUrl');\n\n        // Bind the required message handlers\n        this.onMessage('width', this._onWidthMessage);\n\n        // Initialize settings with overrides.\n        for (var key in config) {\n            this.settings[key] = config[key];\n        }\n\n        // Set up a listener to handle any incoming messages.\n        window.addEventListener('message', this._processMessage, false);\n\n        // If there's a callback function, call it.\n        if (this.settings.renderCallback) {\n            this.settings.renderCallback(width);\n        }\n\n        // Send the initial height to the parent.\n        this.sendHeight();\n\n        // If we're configured to poll, create a setInterval to handle that.\n        if (this.settings.polling) {\n            window.setInterval(this.sendHeight, this.settings.polling);\n        }\n\n        return this;\n    };\n\n    // Initialize elements with pym data attributes\n    _autoInit();\n\n    return lib;\n});\n"
  ]
}